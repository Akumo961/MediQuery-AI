# docker-compose.yml - MediQuery AI Complete Deployment
version: '3.8'

services:
  # PostgreSQL Database for storing application data
  postgres:
    image: postgres:15-alpine
    container_name: mediquery-postgres
    environment:
      POSTGRES_DB: mediquery
      POSTGRES_USER: mediquery_user
      POSTGRES_PASSWORD: mediquery_secure_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - mediquery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mediquery_user -d mediquery"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mediquery-redis
    command: redis-server --appendonly yes --requirepass redis_secure_password_123
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - mediquery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch for advanced medical literature search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mediquery-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mediquery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # FastAPI Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: mediquery-backend
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://mediquery_user:mediquery_secure_password_123@postgres:5432/mediquery

      # Redis Configuration
      - REDIS_URL=redis://:redis_secure_password_123@redis:6379/0

      # Elasticsearch Configuration
      - ELASTICSEARCH_URL=http://elasticsearch:9200

      # Application Settings
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=False
      - LOG_LEVEL=INFO

      # AI Model Settings
      - MODELS_PATH=/app/models
      - DATA_PATH=/app/data
      - UPLOADS_PATH=/app/uploads
      - MAX_FILE_SIZE=50MB
      - MODEL_CACHE_SIZE=1000

      # Security Settings
      - SECRET_KEY=your-super-secure-secret-key-change-in-production
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,frontend
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000

      # External API Keys (set these in .env file)
      - PUBMED_API_KEY=${PUBMED_API_KEY:-}
      - CLINICAL_TRIALS_API_KEY=${CLINICAL_TRIALS_API_KEY:-}
      - HUGGING_FACE_TOKEN=${HUGGING_FACE_TOKEN:-}

      # Performance Settings
      - WORKERS=4
      - MAX_CONCURRENT_REQUESTS=100
      - REQUEST_TIMEOUT=300

      # GPU Settings (uncomment if using GPU)
      # - CUDA_VISIBLE_DEVICES=0
      # - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      # Persistent data volumes
      - ./data:/app/data
      - ./models:/app/models
      - ./uploads:/app/uploads
      - ./logs:/app/logs

      # Configuration files
      - ./config:/app/config

      # Source code (for development - remove in production)
      - ./src:/app/src:ro
    ports:
      - "8000:8000"
    networks:
      - mediquery-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # React Frontend Service
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_ENVIRONMENT=production
        - REACT_APP_VERSION=1.0.0
    container_name: mediquery-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws
      - GENERATE_SOURCEMAP=false
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - mediquery-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: mediquery-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mediquery-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mediquery-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mediquery-network
    restart: unless-stopped

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: mediquery-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_password_123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - mediquery-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Vector Database for Embeddings (Optional - for advanced semantic search)
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: mediquery-weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"
    networks:
      - mediquery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mediquery-celery-worker
    command: celery -A src.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://mediquery_user:mediquery_secure_password_123@postgres:5432/mediquery
      - REDIS_URL=redis://:redis_secure_password_123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_secure_password_123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_secure_password_123@redis:6379/1
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - mediquery-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mediquery-celery-beat
    command: celery -A src.tasks.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://mediquery_user:mediquery_secure_password_123@postgres:5432/mediquery
      - REDIS_URL=redis://:redis_secure_password_123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_secure_password_123@redis:6379/1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - mediquery-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mediquery-flower
    command: celery -A src.tasks.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:redis_secure_password_123@redis:6379/1
      - FLOWER_BASIC_AUTH=admin:flower_admin_password_123
    ports:
      - "5555:5555"
    networks:
      - mediquery-network
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

# Networks
networks:
  mediquery-network:
    driver: bridge
    name: mediquery-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
    name: mediquery-postgres-data

  redis_data:
    driver: local
    name: mediquery-redis-data

  elasticsearch_data:
    driver: local
    name: mediquery-elasticsearch-data

  weaviate_data:
    driver: local
    name: mediQueryai -weaviate-data

  prometheus_data:
    driver: local
    name: mediquery-prometheus-data

  grafana_data:
    driver: local
    name: mediquery-grafana-data

  nginx_logs:
    driver: local
    name: mediquery-nginx-logs

# Additional configurations for production deployment
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "3"

# Override for development (create docker-compose.dev.yml)
# services:
#   backend:
#     environment:
#       - DEBUG=True
#       - LOG_LEVEL=DEBUG
#     volumes:
#       - ./src:/app/src  # Enable hot reload
#
#   frontend:
#     environment:
#       - REACT_APP_ENVIRONMENT=development
#     volumes:
#       - ./src/frontend/src:/app/src  # Enable hot reload